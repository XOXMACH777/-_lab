О проекте
=========

Основная цель проекта - тестирование умений программирования на языке C++ у студентов.

Список заданий
--------------

#. Потоковые манипуляторы ввода/вывода
#. Прокси-объект
#. Итератор
#. Использование ``std::variant``
#. Персер JSON на основе ``boost::spirit::x3``
#. Ассоциативный массив для хранения типа, в котором значения задаются в рантайме
#. Написание тестов для диапазона со страйдом

Как собирать?
=============

cmake
-----

Необходимо просто следовать инструкции, описанной на сайте `cmake <https://cmake.org>`_::

    $ cmake -B build -GNinja .
    $ cmake --build build
    $ cmake --build build test

Если работа осуществляется над конкретным заданием, нужно удалить первую строку ``return()`` из файла ``CMakeLists.txt``.
Запуск тест конкретного задания (в логе тестов задание выглядит как ``<myproject>``)::

    build/ $ cmake --build .
    build/ $ ctest -R <myproject> -V

Флаг ``-V`` показывает детальный отчёт запуска тестов.

Другой вариант запуска тестов - вызов исполнимого файла напрямую, из директории задания в дереве сборки::

    build/ $ ./<myproject>/tests_<myproject>

Вместо команды ``cmake --build build`` можно вызывать команду генератора сборки (для примера выше команда ``ninja``).

docker
------

Ещё один подход сборки проекта - это использование докер-образа ``igsha/cxx-miet``.

#. Установка `docker <https://www.docker.com>`_.
#. Команды для загрузки образа и запуска докер-сессии::

        $ docker run -u `id -u`:`id -g` -v $PWD:/projects -it igsha/cxx-miet:latest
        bash-4.4$ <-- это означает, что сейчас активна докер-сессия

   * после хотя бы одного запуска сессии, образ будет всегда доступен локально (если не почистить его вручную);
   * флаг ``-u `id -u`:`id -g``` используется, чтобы передать некоторые разрешения текущего пользователя внутрь докера;
   * флаг ``-v $PWD:/projects`` используется, чтобы примонтировать текущую директорию с кодом внутрь докера в виде директории ``/projects``;
   * заменчание для Windows-пользователей: флаг ``-u`` не нужен, замените ``$PWD`` на имя текущей директории.
#. Внутри докер-сессии необходимо вызывать те же команды, которые были описаны выше (``mkdir``, ``cd``, ``cmake`` и т.д.).
#. Чтобы выйти из докер-сессии нажмите ``Ctrl-D`` или напишите команду ``exit``.

nix-shell
---------

Использование ``nix-shell`` возможно вне операционной системе `NixOS <https://nixos.org>`_.
Для этого подойдёт любая линукс-подобная система (даже MacOS или WSL для Windows10).

Установить ``nix`` окружение можно с помощью команды ``curl -L https://nixos.org/nix/install | sh``, попутно ответив на несколько вопросов.
Далее перейдите в корень проекта, который необходимо собрать, и вызовите команду ``nix-shell``.
После загрузки пакетов в окружение проекта просто следуйте инструкции по сборке проекта с помощью ``cmake``.

Eclipse Che
-----------

Для сборки проекта можно использовать https://che.openshift.io, чтобы получить доступ к браузерной IDE  на базе eclipse.
Понадобиться конфигурационный файл ``eclipse-che.yml`` из этого репозитория, чтобы правильно настроить рабочее окружение.

Как работать с заданиями
========================

Каждое задание - это подпроект с файлами и папками:

* файл ``CMakeLists.txt``;
* директория ``include``, которая представляет из себя "код" задания;
* директория ``tests`` содержит код для проверки задания;
* файл ``README.rst`` содержит полезную информацию о задании.

Студенты должны работать с файлами только из директории ``include``.
Исключением является последнее задание, где студентами необходимо править файлы в директории ``tests``.
Основной критерий сдачи задания - это прохождение всех тестов в подпроекте задания.

Вопросы для саморазвития
========================

#. Как объявить и определить функцию внутри другой функции?
#. Как скопировать лямбда-функцию?
#. Как вызвать неконстантный метод класса члена класса, находясь в константном методе?

   .. code::

        struct cba
        {
            std::ostream& o;
        }

        struct abc
        {
            void mark() const
            {
                obj.o << 123;
            }

            ?cba? obj;
        }

#. Как инициализировать переменные класса в разных конструкторах одинаково?
#. Как инициализировать переменную класса через отдельную функцию в списке инициализации конструктора?

Темы для собственных pet-проектов:

* `INI-парсер <https://en.wikipedia.org/wiki/INI_file>`_ с EBNF в комментариях;
* реализация мультиразверного итератора с возможностью выбора направления итерации (по осям x, y или z и и.д.);
* реализация примера работы с `google-protobuf <https://developers.google.com/protocol-buffers>`_;
* реализация битового итератора;
* реализация `дуальных чисел <https://en.wikipedia.org/wiki/Dual_number>`_.
