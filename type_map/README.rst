О задании
=========

Предоставляет ассоциативный контейнер, который каждому типу ставит в пару какое-нибудь значение.
Типы устанавливаются на этапе компиляции, но значения задаются на этапе выполнения программы.

Например, необходимо типу ``int`` поставить в соответствие число ``1``, а типу ``float`` - число ``2``:

.. code-block:: cpp

   type_map<int, int, float> m{{1, 2}};
   auto value0 = std::get<float>(m); // == 2
   auto value1 = m.as<int>(); // == 1

Первый аргумент ``int`` - это тип значений, второй и последующие типы - это типы для соответствия.

Требования
==========

Используйте список инициализации для создания ассоциативных значений.
Используйте только одну реализацию метода ``as``.
Второй аналогичный метод ``as`` должен делать перевызов первого.

Необходимо прохождение всех тестов.

Подсказки
=========

#. Разберитесь с тем, как работает структура ``type_to_index``.
#. Метод ``as`` работает аналогично ``std::get``.
#. `Вызов шаблона из шаблона <https://stackoverflow.com/questions/7397934/calling-template-function-within-template-class>`_.
#. Возвращение ``auto`` рассматривается как возврат по значению, а ``decltype(auto)`` - возврат по ссылке.
